import logging
from typing import Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot
from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError, TelegramNotFound, TelegramRetryAfter

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Pydantic settings
from core.config import settings

from database import crud
from database.models import User, NatalData # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π

logger = logging.getLogger(__name__)

async def check_service_availability(
    session: AsyncSession, user_id: int
) -> Tuple[bool, int, bool, str]:
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–π —É—Å–ª—É–≥–∏. """
    user = await crud.get_user(session, user_id)
    if not user: return False, 0, False, "–û—à–∏–±–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    credits = user.credits
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Pydantic
    is_free_available = settings.first_service_free and not user.first_service_used
    service_cost = settings.service_cost

    if credits >= service_cost:
        msg = f"–£ –≤–∞—Å {credits} –∫—Ä. –£—Å–ª—É–≥–∞ —Å—Ç–æ–∏—Ç {service_cost} –∫—Ä."
        return True, credits, False, msg
    elif is_free_available:
        msg = "‚ú® –î–æ—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–≤–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —É—Å–ª—É–≥–∞!"
        return True, credits, True, msg
    else:
        msg = f"–£ –≤–∞—Å {credits} –∫—Ä. –ù—É–∂–Ω–æ {service_cost} –∫—Ä.\n–ö—É–ø–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã."
        return False, credits, False, msg

async def use_service_credit(session: AsyncSession, user_id: int) -> bool:
    """ –°–ø–∏—Å—ã–≤–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç –∑–∞ —É—Å–ª—É–≥—É (–ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—É—é). """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —Å –≤—ã–∑–æ–≤–æ–º crud.mark_first_service_used
    service_cost = settings.service_cost
    new_balance = await crud.update_user_credits(session, user_id, -service_cost)
    # crud.update_user_credits –≤–µ—Ä–Ω–µ—Ç None –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
    return new_balance is not None


async def has_natal_data(session: AsyncSession, user_id: int) -> bool:
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. """
    natal_data = await crud.get_natal_data(session, user_id)
    return natal_data is not None


# –§—É–Ω–∫—Ü–∏—è get_user_or_register –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ handle_start, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω—É–∂–¥
# async def get_user_or_register(...) -> Optional[User]: ...


# --- –§—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def notify_user(bot: Bot, user_id: int, message: str, keyboard=None, parse_mode="HTML") -> bool:
    """ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫. """
    try:
        await bot.send_message(user_id, message, reply_markup=keyboard, parse_mode=parse_mode, disable_web_page_preview=True)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user {user_id}")
        return True
    except TelegramRetryAfter as e:
        logger.warning(f"Flood limit exceeded for user {user_id}. Sleeping for {e.retry_after}s.")
        await asyncio.sleep(e.retry_after)
        return await notify_user(bot, user_id, message, keyboard, parse_mode) # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
    except (TelegramForbiddenError, TelegramNotFound) as e:
        # –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        logger.warning(f"Cannot send message to user {user_id}: {e}. User might have blocked the bot or is deactivated.")
        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        # await crud.deactivate_user(session, user_id)
        return False
    except TelegramAPIError as e: # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API
        logger.error(f"Failed to send message to user {user_id}: {e}")
        return False
    except Exception as e: # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.exception(f"Unexpected error sending message to user {user_id}: {e}")
        return False


async def notify_payment_success(bot: Bot, user_id: int, credits_purchased: int):
    """ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ. """
    message = settings.PAYMENT_THANK_YOU.format(credits=credits_purchased)
    await notify_user(bot, user_id, message)

async def notify_payment_failure(bot: Bot, user_id: int, reason: str = ""):
    """ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ. """
    message = settings.PAYMENT_ERROR + (f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}" if reason else "")
    await notify_user(bot, user_id, message)

async def notify_referrer_bonus(bot: Bot, referrer_id: int, referred_user_name: str, bonus_credits: int):
    """ –£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞. """
    message = (f"üéâ –í–∞—à –¥—Ä—É–≥ {referred_user_name} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–µ—Ä–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —É—Å–ª—É–≥–æ–π!"
               f"\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: {bonus_credits} –∫—Ä–µ–¥–∏—Ç(–∞).\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ –¥—Ä—É–∑–µ–π!")
    await notify_user(bot, referrer_id, message)

# –ò–º–ø–æ—Ä—Ç asyncio –¥–ª—è sleep
import asyncio