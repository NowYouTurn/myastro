import logging
import asyncio
from typing import List, Optional
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timedelta, timezone

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Pydantic settings
from core.config import settings

# –ò–º–ø–æ—Ä—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
from database import crud
from database.models import User, NatalData, Payment, Log, PaymentStatus, LogLevel

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from services import openai_service, payment_service
from utils.geocoding import geocode # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º geocode –∏–∑ utils
from geopy.exc import GeocoderServiceError, GeocoderTimedOut

logger = logging.getLogger(__name__)

async def format_user_info(
    user: User,
    natal_data: Optional[NatalData],
    payments_count: int,
    logs_count: int
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω—É."""
    if not user: return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    referrer_info = "–ù–µ—Ç"
    if user.referrer_id:
        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        # referrer = await crud.get_user(session, user.referrer_id)
        # referrer_info = f"{referrer.first_name} (ID: {user.referrer_id})" if referrer else f"ID: {user.referrer_id}"
        referrer_info = f"ID: {user.referrer_id}"

    natal_info = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if natal_data:
        natal_info = (f"–î–∞—Ç–∞: {natal_data.birth_date}, –í—Ä–µ–º—è: {natal_data.birth_time}, "
                      f"–ì–æ—Ä–æ–¥: {natal_data.birth_city} (TZ: {natal_data.timezone})")

    horoscope_time = user.daily_horoscope_time or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .isoformat() –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ strftime —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
    reg_date_str = user.registration_date.strftime('%Y-%m-%d %H:%M %Z') if user.registration_date else 'N/A'
    last_act_str = user.last_activity_date.strftime('%Y-%m-%d %H:%M %Z') if user.last_activity_date else 'N/A'

    info = f"""
üë§ <b>–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>
ID: <code>{user.id}</code>
–ò–º—è: {user.first_name or ''} {user.last_name or ''}
Username: @{user.username if user.username else '<i>-</i>'}
–Ø–∑—ã–∫: {user.language_code or 'N/A'}
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date_str}
–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_act_str}

üí∞ <b>–ë–∞–ª–∞–Ω—Å/–£—Å–ª—É–≥–∏:</b>
–ö—Ä–µ–¥–∏—Ç—ã: <b>{user.credits}</b>
–ë–µ—Å–ø–ª. —É—Å–ª—É–≥–∞: {'–î–∞' if user.first_service_used else '–ù–µ—Ç'}
–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã: {'–î–∞' if user.accepted_terms else '–ù–µ—Ç'}

üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>
–†–µ—Ñ. –∫–æ–¥: <code>{user.referral_code or 'N/A'}</code>
–ü—Ä–∏–≥–ª–∞—à–µ–Ω –æ—Ç: {referrer_info}
–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {len(user.referrals)} —á–µ–ª.

üîÆ <b>–î–∞–Ω–Ω—ã–µ:</b>
–ù–∞—Ç–∞–ª—å–Ω—ã–µ: {natal_info}
–í—Ä–µ–º—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (UTC): {horoscope_time}

üìä <b>–ò—Å—Ç–æ—Ä–∏—è (–∫–æ–ª-–≤–æ):</b>
–ü–ª–∞—Ç–µ–∂–µ–π: {payments_count}
–õ–æ–≥–æ–≤: {logs_count}
"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    return "\n".join(line.strip() for line in info.strip().splitlines())


async def generate_statistics_report(session: AsyncSession) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    try:
        now = datetime.now(timezone.utc)
        day_ago = now - timedelta(days=1)
        week_ago = now - timedelta(days=7)

        total_users = await crud.count_total_users(session)
        new_today = await crud.count_new_users(session, day_ago)
        new_week = await crud.count_new_users(session, week_ago)
        active_today = await crud.count_active_users(session, day_ago)
        active_week = await crud.count_active_users(session, week_ago)
        horoscope_subs = await crud.count_horoscope_users(session)

        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º (—Å—É–º–º–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) –∏ —É—Å–ª—É–≥–∞–º

        report = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b> ({now.strftime('%Y-%m-%d %H:%M %Z')}):
-----------------------------------
<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}

<b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
- –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {new_today}
- –ó–∞ –Ω–µ–¥–µ–ª—é: {new_week}

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
- –°–µ–≥–æ–¥–Ω—è: {active_today}
- –ó–∞ –Ω–µ–¥–µ–ª—é: {active_week}

<b>–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–æ—Ä–æ—Å–∫–æ–ø:</b> {horoscope_subs}

<i>(–î—Ä—É–≥–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)</i>
"""
        return report.strip()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."


def format_payment_list(payments: List[Payment]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π."""
    if not payments: return "–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    lines = [f"üßæ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(payments)} –ø–ª–∞—Ç–µ–∂–µ–π:</b>"]
    for p in payments:
        status_emoji = {"SUCCEEDED": "‚úÖ", "PENDING": "‚è≥", "CANCELED": "‚ùå", "WAITING_FOR_CAPTURE": "‚è≥"}.get(p.status.name, "‚ùì")
        awarded_emoji = "üèÜ" if p.credits_awarded else ""
        created_str = p.created_at.strftime('%y-%m-%d %H:%M') if p.created_at else 'N/A'
        lines.append(f"- <code>{p.yookassa_payment_id[-12:]}</code> ({created_str}): {p.amount / 100} {p.currency} ({p.credits_purchased} –∫—Ä.) –°—Ç: {status_emoji}{awarded_emoji}")
    return "\n".join(lines)


def format_log_list(logs: List[Log]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤."""
    if not logs: return "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    lines = [f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)} –ª–æ–≥–æ–≤:</b>"]
    for log in logs:
        user_info = f" U:{log.user_id}" if log.user_id else ""
        handler_info = f" [{log.handler[:15]}]" if log.handler else ""
        level_emoji = {"DEBUG": "‚öôÔ∏è", "INFO": "‚ÑπÔ∏è", "WARNING": "‚ö†Ô∏è", "ERROR": "‚ùå", "CRITICAL": "üî•"}.get(log.level.name, "‚ùì")
        ts = log.timestamp.strftime('%m-%d %H:%M:%S') if log.timestamp else '?'
        message = (log.message[:100] + '...') if len(log.message) > 100 else log.message
        exception = ""
        if log.exception_info: exception = "\n  <code>" + (log.exception_info[:100] + '...') + "</code>"
        lines.append(f"{level_emoji} {ts}{user_info}{handler_info}: <i>{message}</i>{exception}")
    return "<pre>" + "\n".join(lines) + "</pre>"


async def check_external_services() -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)."""
    results = []
    tasks = []
    timeout = 5.0 # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫

    # OpenAI
    async def check_openai():
        if openai_service.client:
            try: await asyncio.wait_for(openai_service.client.models.list(limit=1), timeout=timeout); return "‚úÖ OpenAI: OK"
            except asyncio.TimeoutError: logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI: –¢–∞–π–º–∞—É—Ç"); return f"‚ùå OpenAI: –¢–∞–π–º–∞—É—Ç ({timeout}s)"
            except Exception as e: logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI: {e}"); return f"‚ùå OpenAI: –û—à–∏–±–∫–∞ ({type(e).__name__})"
        else: return "‚ùå OpenAI: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    tasks.append(check_openai())

    # YooKassa
    async def check_yookassa():
        # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –Æ–∫–∞—Å—Å—ã —Å–ª–æ–∂–Ω–∞ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SDK.
        return "‚úÖ YooKassa: SDK —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω" if payment_service.YOOKASSA_ENABLED else "‚ùå YooKassa: SDK –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    tasks.append(check_yookassa())

    # Geocoding
    async def check_geocoding():
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ geocode
            await asyncio.wait_for(asyncio.to_thread(geocode, "Paris", language='en', timeout=timeout), timeout=timeout+1)
            return "‚úÖ Geocoding (Nominatim): OK"
        except asyncio.TimeoutError: logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ Geopy: –¢–∞–π–º–∞—É—Ç"); return f"‚ùå Geocoding: –¢–∞–π–º–∞—É—Ç ({timeout}s)"
        except (GeocoderTimedOut, GeocoderServiceError) as e: logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ Geopy: {e}"); return f"‚ùå Geocoding: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ ({type(e).__name__})"
        except Exception as e: logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ Geopy: {e}"); return f"‚ùå Geocoding: –û—à–∏–±–∫–∞ ({type(e).__name__})"
    tasks.append(check_geocoding())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        results = await asyncio.gather(*tasks)
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
         return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤."

    return "‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n" + "\n".join(results)