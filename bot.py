import asyncio
import logging
import ssl
import ipaddress
from typing import Dict, Any, Callable, Awaitable, Optional # –î–æ–±–∞–≤–ª–µ–Ω—ã Optional, Any

from aiogram import Bot, Dispatcher, F, BaseMiddleware
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext # –ò–º–ø–æ—Ä—Ç FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.types import Update, BotCommand, BotCommandScopeDefault

from aiohttp import web
from sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession

# –ò–º–ø–æ—Ä—Ç Pydantic –Ω–∞—Å—Ç—Ä–æ–µ–∫
from core.config import settings

# –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ middleware
from database.database import init_models, async_session_factory
from middlewares.db import DbSessionMiddleware
from middlewares.logging import LoggingContextMiddleware
from middlewares.throttling import ThrottlingMiddleware

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
from utils.logging_config import setup_logging
from services import scheduler_service, payment_service # –ò–º–ø–æ—Ä—Ç payment_service

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from handlers import (
    common, astrology, horoscope, other_services,
    palmistry, payment, referral, admin
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sentry (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω DSN) ---
if settings.sentry_dsn:
    try:
        import sentry_sdk
        from sentry_sdk.integrations.aiohttp import AioHttpIntegration
        from sentry_sdk.integrations.logging import LoggingIntegration
        from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration

        sentry_logging = LoggingIntegration(
            level=logging.INFO,        # INFO –∏ –≤—ã—à–µ –∫–∞–∫ breadcrumbs
            event_level=logging.ERROR  # ERROR –∏ –≤—ã—à–µ –∫–∞–∫ —Å–æ–±—ã—Ç–∏—è Sentry
        )
        sentry_sdk.init(
            dsn=settings.sentry_dsn,
            integrations=[ AioHttpIntegration(), SqlalchemyIntegration(), sentry_logging ],
            traces_sample_rate=1.0, profiles_sample_rate=1.0, send_default_pii=False )
        logging.info("Sentry SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except ImportError: logging.warning("Sentry DSN —É–∫–∞–∑–∞–Ω, –Ω–æ 'sentry-sdk' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e: logging.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Sentry: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –ÆKassa ---
async def handle_yookassa_webhook(request: web.Request):
    bot = request.app['bot']
    session_factory = request.app['session_factory']
    remote_ip_str = request.remote
    logger = logging.getLogger(__name__)
    logger.debug(f"[Webhook YooKassa] –ó–∞–ø—Ä–æ—Å –æ—Ç {remote_ip_str} –Ω–∞ {settings.yookassa_webhook_path}")
    try: # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP
        remote_ip = ipaddress.ip_address(remote_ip_str)
        if not any(remote_ip in ipaddress.ip_network(net) for net in settings.yookassa_ips):
            logger.warning(f"[Webhook YooKassa] –ù–µ–¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π IP: {remote_ip_str}. –û—Ç–∫–∞–∑."); return web.Response(status=403)
    except ValueError: logger.warning(f"[Webhook YooKassa] –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω IP: {remote_ip_str}. –û—Ç–∫–∞–∑."); return web.Response(status=400)
    try: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = await request.json(); logger.info(f"[Webhook YooKassa] –î–∞–Ω–Ω—ã–µ: {str(data)[:500]}...")
        async with session_factory() as session: # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            success = await payment_service.process_yookassa_notification(session=session, bot=bot, notification_data=data)
        if success: logger.info(f"[Webhook YooKassa] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ."); return web.Response(status=200)
        else: logger.error(f"[Webhook YooKassa] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."); return web.Response(status=500)
    except Exception as e: logger.exception(f"[Webhook YooKassa] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"); return web.Response(status=500)


# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ---
async def on_startup(bot: Bot, dp: Dispatcher):
    logger = logging.getLogger(__name__)
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è on_startup...")
    try: await init_models() # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    except Exception as e: logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}.", exc_info=True); raise
    #if not settings.webhook_domain: logger.critical("WEBHOOK_DOMAIN –Ω–µ –∑–∞–¥–∞–Ω!"); raise ValueError("WEBHOOK_DOMAIN –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω")
    #webhook_url = f"{settings.base_webhook_url}{settings.telegram_webhook_path}"
    #try:
        #await bot.set_webhook( url=webhook_url, secret_token=settings.telegram_webhook_secret.get_secret_value(),
            #allowed_updates=dp.resolve_used_update_types() )
        #logger.info(f"–í–µ–±—Ö—É–∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    #except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ Telegram: {e}", exc_info=True); raise
    scheduler_service.setup_scheduler_jobs(bot); scheduler_service.start_scheduler()
    commands = [ BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                 BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"),
                 BotCommand(command="menu", description="üè† –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), ]
    try: await bot.set_my_commands(commands, scope=BotCommandScopeDefault())
    except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é: {e}")
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def on_shutdown(bot: Bot):
    #logger = logging.getLogger(__name__)
    #logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è on_shutdown...")
    #scheduler_service.shutdown_scheduler()
    #logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ Telegram...")
    #try:
    #    if bot.token: await bot.delete_webhook(drop_pending_updates=True) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    #    else: logger.warning("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞.")
    #except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
    #logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
    #try:
    #    if bot.session and not bot.session.closed: await bot.session.close()
    #except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}", exc_info=True)
    #logger.info("–†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
    def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging() # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Pydantic
    logger = logging.getLogger(__name__)
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ (–ü–æ—Ä—Ç: {settings.webhook_server_port})...")

    if not settings.webhook_domain or not settings.telegram_webhook_path:
        logger.critical("WEBHOOK_DOMAIN –∏–ª–∏ TELEGRAM_WEBHOOK_PATH –Ω–µ –∑–∞–¥–∞–Ω! –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aiogram
    storage = MemoryStorage() # –î–ª—è FSM (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ RedisStorage –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è)
    bot = Bot(token=settings.telegram_bot_token.get_secret_value(), parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Middleware (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
    dp.update.outer_middleware(LoggingContextMiddleware())
    dp.update.outer_middleware(DbSessionMiddleware(session_factory=async_session_factory))
    dp.message.middleware(ThrottlingMiddleware(storage=storage)) # –ü–µ—Ä–µ–¥–∞–µ–º storage –≤ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥
    dp.callback_query.middleware(ThrottlingMiddleware(storage=storage))
    dp.callback_query.middleware(CallbackAnswerMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    dp.include_router(admin.admin_router) # –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –ø–µ—Ä–≤—ã–º
    dp.include_router(common.common_router)
    dp.include_router(astrology.astrology_router)
    dp.include_router(horoscope.horoscope_router)
    dp.include_router(other_services.other_services_router)
    dp.include_router(palmistry.palmistry_router)
    dp.include_router(payment.payment_router)
    dp.include_router(referral.referral_router)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤ startup/shutdown
    dp.startup.register(lambda dispatcher=dp: on_startup(bot, dispatcher))
    dp.shutdown.register(lambda: on_shutdown(bot))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è aiohttp
    #app = web.Application()
    #app['bot'] = bot
    #app['session_factory'] = async_session_factory

    # –†–æ—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –ÆKassa
    #app.router.add_post(settings.yookassa_webhook_path, handle_yookassa_webhook)

    # –†–æ—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Telegram
    #webhook_requests_handler = SimpleRequestHandler(
    #    dispatcher=dp,
    #    bot=bot,
    #    secret_token=settings.telegram_webhook_secret.get_secret_value()
    #)
    #webhook_requests_handler.register(app, path=settings.telegram_webhook_path)

    # –°–≤—è–∑—ã–≤–∞–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª Aiogram –∏ aiohttp
    #setup_application(app, dp, bot=bot)

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å, –µ—Å–ª–∏ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏
    # ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    # ssl_context.load_cert_chain('path/to/fullchain.pem', 'path/to/privkey.pem')
    #logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{settings.webhook_server_listen_host}:{settings.webhook_server_port}")
    #web.run_app(
    #    app,
    #    host=settings.webhook_server_listen_host,
    #    port=settings.webhook_server_port,
        # ssl_context=ssl_context # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è HTTPS –Ω–∞–ø—Ä—è–º—É—é
    #)

    if __name__ == "__main__":
        try:
            main()
        except (KeyboardInterrupt, SystemExit):
            logging.getLogger(__name__).info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logging.getLogger(__name__).critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)