import logging
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, FSInputFile, User # –î–æ–±–∞–≤–ª–µ–Ω User
from aiogram.utils.markdown import hlink, hbold
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest

from sqlalchemy.ext.asyncio import AsyncSession

from keyboards import reply, inline
from core.config import settings, PAID_SERVICES, SERVICE_COST # –ò—Å–ø–æ–ª—å–∑—É–µ–º Pydantic settings
from database import crud
from services.user_service import notify_user # get_user_or_register –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
from states.user_states import TermsAgreement
from utils.referral_utils import generate_referral_link

common_router = Router()
logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
@common_router.message(CommandStart())
async def handle_start(message: Message, session: AsyncSession, state: FSMContext, bot: Bot):
    await state.clear()
    aiogram_user: User = message.from_user # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Aiogram
    args = message.text.split()
    referrer_code = args[1] if len(args) > 1 else None
    referrer_id = None

    if referrer_code:
        referrer = await crud.get_user_by_referral_code(session, referrer_code)
        if referrer and referrer.id != aiogram_user.id:
            referrer_id = referrer.id; logger.info(f"User {aiogram_user.id} started via ref {referrer_code} from {referrer_id}")
        elif referrer: logger.info(f"User {aiogram_user.id} used own ref code '{referrer_code}'.")
        else: logger.warning(f"Invalid ref code '{referrer_code}' used by {aiogram_user.id}")

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db_user = await crud.create_or_update_user(
        session=session, user_id=aiogram_user.id, username=aiogram_user.username,
        first_name=aiogram_user.first_name, last_name=aiogram_user.last_name,
        language_code=aiogram_user.language_code, referrer_id=referrer_id )

    if not db_user: logger.error(f"Failed create/update user {aiogram_user.id}"); await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è."); return

    user_name = db_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π
    if not db_user.accepted_terms:
        logger.info(f"User {db_user.id} needs terms agreement.")
        legal_notice_text = settings.LEGAL_NOTICE # –ë–µ—Ä–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await message.answer( f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hbold(user_name)}!\n\n"
            f"–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ-—ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n{settings.ACCEPT_TERMS_PROMPT}",
            reply_markup=ReplyKeyboardRemove() )
        await message.answer( legal_notice_text, reply_markup=inline.get_accept_terms_keyboard(),
            parse_mode="HTML", disable_web_page_preview=True )
        await state.set_state(TermsAgreement.waiting_for_agreement)
    else:
        logger.info(f"User {db_user.id} already accepted. Show main menu.")
        await message.answer( f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {hbold(user_name)}!\n–ß–µ–º –ø–æ–º–æ—á—å?",
            reply_markup=reply.get_main_menu(db_user.id) )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π ---
@common_router.callback_query(TermsAgreement.waiting_for_agreement, F.data == "accept_terms")
async def handle_accept_terms(callback: CallbackQuery, session: AsyncSession, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id; user_name = callback.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    success = await crud.set_user_accepted_terms(session, user_id)
    await state.clear()

    if success:
        logger.info(f"User {user_id} accepted terms.")
        try:
            await callback.message.edit_text(f"–°–ø–∞—Å–∏–±–æ, {hbold(user_name)}! –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", parse_mode="HTML")
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply.get_main_menu(user_id))
        except TelegramBadRequest as e:
             if "message is not modified" in str(e): await callback.answer("–£—Å–ª–æ–≤–∏—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã.")
             else: logger.error(f"Error editing msg on terms accept user {user_id}: {e}"); await callback.message.answer("–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã!\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply.get_main_menu(user_id))
        except Exception as e: logger.exception(f"Unexpected error on terms accept user {user_id}: {e}"); await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    else:
        logger.error(f"Failed set terms flag user {user_id}")
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è.", show_alert=True)
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–Ω–µ–µ)
    try: await callback.answer()
    except Exception: pass


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help ---
@common_router.message(Command("help"))
@common_router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help(message: Message, session: AsyncSession, state: FSMContext, bot: Bot):
     user = await crud.get_user(session, message.from_user.id)
     user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
     if not user or not user.accepted_terms: await handle_start(message, session, state, bot); return

     help_text = f"""
–ü—Ä–∏–≤–µ—Ç, {hbold(user_name)}! –Ø —É–º–µ—é:

üîÆ {hbold("–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:")} –†–∞—Å—á–µ—Ç –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.
‚ú® {hbold("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥:")} –û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å—Ñ–µ—Ä–∞–º –∂–∏–∑–Ω–∏.
üíñ {hbold("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:")} –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç –¥–≤—É—Ö –ª—é–¥–µ–π + %.
üåô {hbold("–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–∞:")} –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤–∞—à–∏—Ö —Å–Ω–æ–≤.
üçÄ {hbold("–ü—Ä–∏–º–µ—Ç—ã –∏ –≠–∑–æ—Ç–µ—Ä–∏–∫–∞:")} –ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ç –∏ —è–≤–ª–µ–Ω–∏–π.
‚úã {hbold("–•–∏—Ä–æ–º–∞–Ω—Ç–∏—è:")} –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–µ–π (–ò–ò).
‚è∞ {hbold("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø:")} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ).
üí∞ {hbold("–ë–∞–ª–∞–Ω—Å –∏ –ü–æ–∫—É–ø–∫–∞:")} –ë–∞–ª–∞–Ω—Å ({user.credits} –∫—Ä.) –∏ –ø–æ–∫—É–ø–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ ({settings.service_cost} –∫—Ä./—É—Å–ª—É–≥–∞). –ü–µ—Ä–≤–∞—è —É—Å–ª—É–≥–∞ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
üéÅ {hbold("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:")} –ë–æ–Ω—É—Å—ã –∑–∞ –¥—Ä—É–∑–µ–π (–∑–∞ –∏—Ö –ø–µ—Ä–≤—É—é –±–µ—Å–ø–ª. —É—Å–ª—É–≥—É).

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é. /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
–í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ/–≤–æ–∑–≤—Ä–∞—Ç–∞–º: {settings.refund_contact_email}
"""
     await message.answer(help_text, reply_markup=reply.get_main_menu(user.id), parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu ---
@common_router.message(Command("menu"))
async def handle_menu_command(message: Message, session: AsyncSession, state: FSMContext, bot: Bot): # –î–æ–±–∞–≤–ª–µ–Ω bot
    await state.clear()
    user = await crud.get_user(session, message.from_user.id)
    if not user or not user.accepted_terms: await handle_start(message, session, state, bot); return
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply.get_main_menu(user.id))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã ---
@common_router.callback_query(F.data.in_({"cancel_service", "fsm_cancel", "cancel_palmistry", "cancel_payment"})) # –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ –æ—Ç–º–µ–Ω—ã
async def handle_cancel_action(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state(); user_id = callback.from_user.id
    action_text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    if callback.data == "cancel_payment": action_text = "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    elif callback.data == "cancel_palmistry": action_text = "–ê–Ω–∞–ª–∏–∑ –ª–∞–¥–æ–Ω–µ–π –æ—Ç–º–µ–Ω–µ–Ω."
    elif callback.data == "cancel_service": action_text = "–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω."

    if current_state is not None:
        logger.info(f"User {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ {current_state}")
        await state.clear()
    try: await callback.message.edit_text(action_text)
    except TelegramBadRequest: pass # –ò–≥–Ω–æ—Ä "not modified"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply.get_main_menu(user_id))
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ dummy –∫–Ω–æ–ø–æ–∫ ---
@common_router.callback_query(F.data.startswith("dummy_"))
async def handle_dummy_callback(callback: CallbackQuery):
    text = {"dummy_nocredits": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤.", "dummy_nopdf": "–ü—Ä–∏–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."}.get(callback.data, "–ò–Ω—Ñ–æ")
    await callback.answer(text, show_alert=False)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä PDF –ø—Ä–∏–º–µ—Ä–∞ ---
@common_router.callback_query(F.data.startswith("show_pdf_example:"))
async def handle_show_pdf_example(callback: CallbackQuery, session: AsyncSession): # session –Ω–µ –Ω—É–∂–Ω–∞
    service_id = callback.data.split(":", 1)[1]; service_name = PAID_SERVICES.get(service_id, "?")
    pdf_path = settings.pdf_dir / f"{service_id}_example.pdf"
    if pdf_path.exists():
        try:
            pdf_file = FSInputFile(pdf_path, filename=f"{service_id}_example.pdf")
            await callback.message.answer_document(pdf_file, caption=f"üìÑ –ü—Ä–∏–º–µ—Ä '{service_name}'.")
            await callback.answer()
        except TelegramAPIError as e: logger.error(f"–û—à–∏–±–∫–∞ PDF user {callback.from_user.id}: {e}"); await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.", show_alert=True)
        except Exception as e: logger.exception(f"–û—à–∏–±–∫–∞ PDF {pdf_path}: {e}"); await callback.answer("–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞.", show_alert=True)
    else: logger.warning(f"PDF –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}"); await callback.answer(f"–ü—Ä–∏–º–µ—Ä –¥–ª—è '{service_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º) ---
@common_router.message(StateFilter(None), ~CommandStart()) # –õ–æ–≤–∏–º –≤—Å–µ, –∫—Ä–æ–º–µ /start, –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def handle_unknown_message(message: Message, session: AsyncSession, state: FSMContext, bot: Bot):
    user = await crud.get_user(session, message.from_user.id)
    if not user or not user.accepted_terms: await handle_start(message, session, state, bot); return
    logger.debug(f"Unknown message user {message.from_user.id}: {message.text[:50]}")
    await message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help.", reply_markup=reply.get_main_menu(message.from_user.id))