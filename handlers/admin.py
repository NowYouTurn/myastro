import logging
import asyncio
from typing import Optional

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import StateFilter, Command, Filter
from aiogram.utils.markdown import hbold, hcode
from aiogram.exceptions import TelegramBadRequest

from sqlalchemy.ext.asyncio import AsyncSession

from keyboards import reply, inline
from database import crud
from database.models import LogLevel, User # –î–æ–±–∞–≤–ª–µ–Ω User
from services import user_service, payment_service, admin_service
from core.config import settings
from states.user_states import AdminActions

admin_router = Router()
logger = logging.getLogger(__name__)

# --- –§–∏–ª—å—Ç—Ä IsAdmin ---
class IsAdmin(Filter):
    async def __call__(self, m_or_c: Message | CallbackQuery) -> bool:
        return m_or_c.from_user.id in settings.admin_ids

# --- –£—Ç–∏–ª–∏—Ç–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def find_user_by_query(session: AsyncSession, query: str) -> Optional[User]:
    user = None
    try: user = await crud.get_user(session, int(query))
    except (ValueError, TypeError):
        username = query.lstrip('@')
        if username: user = await crud.get_user_by_username(session, username)
    return user

# --- –í—Ö–æ–¥ / –í—ã—Ö–æ–¥ / –û—Ç–º–µ–Ω–∞ ---
@admin_router.message(IsAdmin(), F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
@admin_router.message(IsAdmin(), Command("admin"))
async def cmd_admin_panel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply.get_admin_menu())

async def back_to_admin_menu(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply.get_admin_menu())

@admin_router.message(IsAdmin(), F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_back_to_main(m: Message, state: FSMContext):
    from handlers.common import handle_menu_command
    await handle_menu_command(m, state, m.bot)

@admin_router.callback_query(StateFilter(AdminActions), F.data == "fsm_cancel")
async def cancel_admin(c: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"Admin {c.from_user.id} –æ—Ç–º–µ–Ω–∏–ª {current_state}")
    await state.clear()
    try:
        await c.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except TelegramBadRequest:
        await c.message.delete()
        await c.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await c.message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply.get_admin_menu())
    await c.answer()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@admin_router.message(IsAdmin(), F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(m: Message, session: AsyncSession): await m.answer(await admin_service.generate_statistics_report(session), parse_mode="HTML")

# --- –ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@admin_router.message(IsAdmin(), F.text == "üë§ –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def find_user_start(m: Message, state: FSMContext):
    await m.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ Username:", reply_markup=inline.get_cancel_keyboard())
    await state.set_state(AdminActions.waiting_for_user_query_info)

@admin_router.message(IsAdmin(), AdminActions.waiting_for_user_query_info)
async def find_user_process(m: Message, state: FSMContext, session: AsyncSession):
    user = await find_user_by_query(session, m.text.strip())
    if user:
        await state.clear()
        natal = await crud.get_natal_data(session, user.id)
        payments = await crud.get_user_payments(session, user.id, 10)
        logs = await crud.get_user_logs(session, user.id, 20)

        info = await admin_service.format_user_info(user, natal, len(payments), len(logs))
        await m.answer(info, parse_mode="HTML")

        if payments:
            await m.answer(admin_service.format_payment_list(payments), parse_mode="HTML")
        if logs:
            try:
                await m.answer(admin_service.format_log_list(logs), parse_mode="HTML")
            except TelegramBadRequest:
                await m.answer("üìÑ –õ–æ–≥–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ.")

        await m.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply.get_admin_menu())
    else:
        await m.reply("–ù–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ.", reply_markup=inline.get_cancel_keyboard())

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö—Ä–µ–¥–∏—Ç–∞–º–∏ ---
@admin_router.message(IsAdmin(), F.text == "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞–º–∏")
async def credits_start(m: Message, state: FSMContext): await m.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ Username:", reply_markup=inline.get_cancel_keyboard()); await state.set_state(AdminActions.waiting_for_user_query_credits)
@admin_router.message(IsAdmin(), AdminActions.waiting_for_user_query_credits)
async def credits_user(m: Message, state: FSMContext, session: AsyncSession):
    user = await find_user_by_query(session, m.text.strip())
    if user: await state.update_data(uid=user.id, uname=user.first_name, creds=user.credits); await m.answer(f"User: {user.first_name}(<code>{user.id}</code>), –ë–∞–ª–∞–Ω—Å: {user.credits}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (+/-):", reply_markup=inline.get_cancel_keyboard(), parse_mode="HTML"); await state.set_state(AdminActions.waiting_for_credits_amount)
    else: await m.reply("–ù–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=inline.get_cancel_keyboard())
@admin_router.message(IsAdmin(), AdminActions.waiting_for_credits_amount)
async def credits_amount(m: Message, state: FSMContext):
    try: amount = int(m.text); assert amount != 0
    except(ValueError, AssertionError): await m.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ (–Ω—É–∂–Ω–æ != 0).", reply_markup=inline.get_cancel_keyboard()); return
    await state.update_data(change=amount); await m.answer(f"–°—É–º–º–∞: {amount:+}. –ü—Ä–∏—á–∏–Ω–∞:", reply_markup=inline.get_cancel_keyboard()); await state.set_state(AdminActions.waiting_for_reason_credits)
@admin_router.message(IsAdmin(), AdminActions.waiting_for_reason_credits)
async def credits_reason(m: Message, state: FSMContext):
    reason = m.text.strip()
    if not reason or len(reason) < 3: await m.reply("–ü—Ä–∏—á–∏–Ω–∞ < 3 —Å–∏–º–≤.", reply_markup=inline.get_cancel_keyboard()); return
    await state.update_data(reason=reason); data = await state.get_data(); amount = data.get('change',0); new_b = data.get('creds',0)+amount
    await m.answer(f"<b>–ü–æ–¥—Ç–≤.:</b>\nUser: {data.get('uname','?')}(<code>{data.get('uid','?')}</code>)\n–ò–∑–º: {amount:+}\n–ù–æ–≤. –±–∞–ª–∞–Ω—Å: {new_b}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?", reply_markup=reply.get_admin_confirm_credits_keyboard(), parse_mode="HTML"); await state.set_state(AdminActions.waiting_for_confirmation_credits)
@admin_router.message(IsAdmin(), AdminActions.waiting_for_confirmation_credits, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ")
async def credits_confirm(m: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    data = await state.get_data(); await state.clear(); uid = data.get('uid'); change = data.get('change'); reason = data.get('reason','-'); admin_id = m.from_user.id
    if uid is None or change is None: logger.error(f"Admin {admin_id}: –û—à–∏–±–∫–∞ FSM credits."); await m.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.", reply_markup=reply.get_admin_menu()); return
    new_b = await crud.update_user_credits(session, uid, change)
    if new_b is not None:
        log_msg = f"Admin {admin_id} –∏–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å user {uid} –Ω–∞ {change:+}. –ü—Ä–∏—á–∏–Ω–∞: {reason}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_b}"; logger.warning(log_msg); await crud.add_log_entry(session, LogLevel.WARNING, log_msg, uid, "admin_credits")
        await m.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å user {uid} –∏–∑–º–µ–Ω–µ–Ω. –ù–æ–≤—ã–π: {new_b}", reply_markup=ReplyKeyboardRemove())
        user_notify = f"–ê–¥–º–∏–Ω –∏–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {change:+}. –ü—Ä–∏—á–∏–Ω–∞: {reason}. –ë–∞–ª–∞–Ω—Å: {new_b}."; await user_service.notify_user(bot, uid, user_notify)
        await m.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply.get_admin_menu())
    else: await m.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.", reply_markup=reply.get_admin_menu())
@admin_router.message(IsAdmin(), AdminActions.waiting_for_confirmation_credits, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def credits_cancel(m: Message, state: FSMContext): await state.clear(); await m.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply.get_admin_menu())

# --- –†–∞—Å—Å—ã–ª–∫–∞ ---
@admin_router.message(IsAdmin(), F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def broadcast_start(m: Message, state: FSMContext): await m.answer("–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (HTML):", reply_markup=inline.get_cancel_keyboard()); await state.set_state(AdminActions.waiting_for_broadcast_message)
@admin_router.message(IsAdmin(), AdminActions.waiting_for_broadcast_message)
async def broadcast_msg(m: Message, state: FSMContext): text = m.html_text; await state.update_data(bcast=text); await m.answer("--- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ---"); await m.answer(text, parse_mode="HTML", disable_web_page_preview=True); await m.answer("--- –ö–æ–Ω–µ—Ü ---\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?", reply_markup=reply.get_confirmation_keyboard()); await state.set_state(AdminActions.waiting_for_broadcast_confirmation)
@admin_router.message(IsAdmin(), AdminActions.waiting_for_broadcast_confirmation, F.text == "‚úÖ –î–∞")
async def broadcast_confirm(m: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    data = await state.get_data(); await state.clear(); text = data.get("bcast"); admin_id = m.from_user.id
    if not text: logger.error(f"Admin {admin_id}: –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."); await m.answer("–û—à–∏–±–∫–∞.", reply_markup=reply.get_admin_menu()); return
    uids = await crud.get_all_user_ids(session)
    if not uids: await m.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=reply.get_admin_menu()); return
    await m.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(uids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...", reply_markup=ReplyKeyboardRemove()); logger.info(f"Admin {admin_id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É {len(uids)}."); await crud.add_log_entry(session, LogLevel.INFO, f"Admin {admin_id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É ({len(uids)})", handler="admin_bcast")
    s, f = 0, 0; start = asyncio.get_event_loop().time()
    for uid in uids: s += 1 if await user_service.notify_user(bot, uid, text) else (f := f + 1); await asyncio.sleep(0.1)
    dur = round(asyncio.get_event_loop().time() - start, 2); res = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ ({dur}—Å). –£—Å–ø–µ—Ö: {s}, –û—à–∏–±–∫–∏: {f}"; log_res = f"–†–∞—Å—Å—ã–ª–∫–∞ Ad:{admin_id}. –£—Å–ø–µ—Ö:{s}, –û—à–∏–±–∫–∏:{f}."; logger.info(log_res); await crud.add_log_entry(session, LogLevel.INFO, log_res, handler="admin_bcast"); await m.answer(res, reply_markup=reply.get_admin_menu())
@admin_router.message(IsAdmin(), AdminActions.waiting_for_broadcast_confirmation, F.text == "‚ùå –ù–µ—Ç")
async def broadcast_cancel(m: Message, state: FSMContext): await state.clear(); await m.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply.get_admin_menu())

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –õ–æ–≥–æ–≤ ---
@admin_router.message(IsAdmin(), F.text == "üìÑ –õ–æ–≥–∏ –±–æ—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def logs_start(m: Message, state: FSMContext): await m.answer("User ID –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ '–≤—Å–µ' (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):", reply_markup=inline.get_cancel_keyboard()); await state.set_state(AdminActions.waiting_for_user_query_logs)
@admin_router.message(IsAdmin(), AdminActions.waiting_for_user_query_logs)
async def logs_process(m: Message, state: FSMContext, session: AsyncSession):
    q = m.text.strip().lower(); limit = 50; uid: Optional[int] = None
    if q != '–≤—Å–µ':
        try: uid = int(q); assert await crud.get_user(session, uid)
        except (ValueError, AssertionError): await m.reply("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ user –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=inline.get_cancel_keyboard()); return
    await state.clear(); target = f"user {uid}" if uid else "–±–æ—Ç–∞"; await m.answer(f"–ó–∞–≥—Ä—É–∂–∞—é {limit} –ª–æ–≥–æ–≤ {target}...")
    logs = await crud.get_user_logs(session, user_id=uid, limit=limit); text = admin_service.format_log_list(logs)
    try: await m.answer(text, parse_mode="HTML")
    except TelegramBadRequest: await m.answer(f"üìÑ –õ–æ–≥–∏ ({len(logs)}) —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ.")
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω—É: {e}"); await m.answer("–û—à–∏–±–∫–∞.")
    await m.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply.get_admin_menu())

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–ª–∞—Ç–µ–∂–∞ –ÆKassa ---
@admin_router.message(IsAdmin(), F.text == "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –ÆKassa")
async def check_pay_start(m: Message, state: FSMContext): await m.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:", reply_markup=inline.get_cancel_keyboard()); await state.set_state(AdminActions.waiting_for_payment_id_check)
@admin_router.message(IsAdmin(), AdminActions.waiting_for_payment_id_check)
async def check_pay_process(m: Message, state: FSMContext, session: AsyncSession):
    pid = m.text.strip()
    if not pid or len(pid) < 36: await m.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.", reply_markup=inline.get_cancel_keyboard()); return
    await state.clear(); await m.answer(f"–ü—Ä–æ–≤–µ—Ä—è—é <code>{pid}</code>...", parse_mode="HTML")
    status, owner_id = await payment_service.check_yookassa_payment_status(session, pid)
    db_pay = await crud.get_payment_by_yookassa_id(session, pid)
    res = f"–°—Ç–∞—Ç—É—Å <code>{pid}</code>:\n"
    if status:
        res += f"- –ÆKassa: <b>{status.name}</b>\n"
        if db_pay: res += f"- –ë–î: <b>{db_pay.status.name}</b> (–ù–∞—á–∏—Å–ª:{'–î–∞' if db_pay.credits_awarded else '–ù–µ—Ç'})\n- User:{db_pay.user_id} ({db_pay.amount/100}—Ä, {db_pay.credits_purchased}–∫—Ä)\n- –°–æ–∑–¥–∞–Ω:{db_pay.created_at.strftime('%y-%m-%d %H:%M')}\n"
        else: res += "- <i>–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.</i>\n"
    else: res += "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç –ÆKassa.</b>"
    await m.answer(res, parse_mode="HTML"); await m.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply.get_admin_menu())